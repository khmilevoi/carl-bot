import type { Context } from 'telegraf';

import { createButton, createRoute, type RouteApi } from './telegramRouter';

export type WindowId =
  | 'menu'
  | 'chat_settings'
  | 'chat_history_limit'
  | 'chat_interest_interval'
  | 'chat_topic_time'
  | 'admin_menu'
  | 'admin_chats'
  | 'admin_chat'
  | 'admin_chat_history_limit'
  | 'admin_chat_interest_interval'
  | 'admin_chat_topic_time'
  | 'chat_not_approved'
  | 'no_access'
  | 'chat_approval_request'
  | 'user_access_request';

const b = createButton<WindowId>;
const r = createRoute<WindowId>;

interface WindowActions {
  exportData(ctx: Context): Promise<void> | void;
  resetMemory(ctx: Context): Promise<void> | void;
  requestChatAccess(ctx: Context): Promise<void> | void;
  requestUserAccess(ctx: Context): Promise<void> | void;
  showAdminChats(ctx: Context): Promise<void> | void;
  showChatSettings(ctx: Context): Promise<void> | void;
  configHistoryLimit(ctx: Context): Promise<void> | void;
  configInterestInterval(ctx: Context): Promise<void> | void;
  configTopicTime(ctx: Context): Promise<void> | void;
}

export function createWindows(actions: WindowActions): RouteApi<WindowId>[] {
  return [
    r('menu', async () => ({
      text: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      buttons: [
        b({
          text: 'üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
          callback: 'export_data',
          action: actions.exportData,
        }),
        b({
          text: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å',
          callback: 'reset_memory',
          action: actions.resetMemory,
        }),
        b({
          text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
          callback: 'chat_settings',
          action: actions.showChatSettings,
        }),
      ],
    })),
    r('chat_settings', async ({ loadData }) => {
      const config = (await loadData()) as {
        historyLimit: number;
        interestInterval: number;
        topicTime: string | null;
        topicTimezone: string;
      };
      return {
        text: '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:',
        buttons: [
          b({
            text: `üïí –õ–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏ (${config.historyLimit})`,
            callback: 'config_history_limit',
            action: actions.configHistoryLimit,
          }),
          b({
            text: `‚ú® –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–∞ (${config.interestInterval})`,
            callback: 'config_interest_interval',
            action: actions.configInterestInterval,
          }),
          b({
            text: `üìù –í—Ä–µ–º—è —Å—Ç–∞—Ç—å–∏ (${config.topicTime ?? '‚Äî'})`,
            callback: 'config_topic_time',
            action: actions.configTopicTime,
          }),
        ],
      };
    }),
    r('chat_history_limit', async () => ({
      text: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏:',
      buttons: [],
    })),
    r('chat_interest_interval', async () => ({
      text: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–∞:',
      buttons: [],
    })),
    r('chat_topic_time', async () => ({
      text: '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ç—å–∏ (HH:MM):',
      buttons: [],
    })),
    r('admin_menu', async () => ({
      text: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      buttons: [
        b({
          text: 'üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
          callback: 'admin_export_data',
          action: actions.exportData,
        }),
        b({
          text: 'üí¨ –ß–∞—Ç—ã',
          callback: 'admin_chats',
          action: actions.showAdminChats,
        }),
      ],
    })),
    r('admin_chats', async ({ loadData }) => {
      const chats =
        ((await loadData()) as { id: number; title: string }[]) ?? [];
      return {
        text:
          chats.length > 0
            ? '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:'
            : '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤',
        buttons: chats.map((chat) =>
          b({
            text: `${chat.title} (${chat.id})`,
            callback: `admin_chat:${chat.id}`,
          })
        ),
      };
    }),
    r('admin_chat', async ({ loadData }) => {
      const { chatId, status, config } = (await loadData()) as {
        chatId: number;
        status: string;
        config: {
          historyLimit: number;
          interestInterval: number;
          topicTime: string | null;
          topicTimezone: string;
        };
      };
      return {
        text: `–°—Ç–∞—Ç—É—Å —á–∞—Ç–∞ ${chatId}: ${status}`,
        buttons: [
          b({
            text: status === 'banned' ? '–†–∞–∑–±–∞–Ω–∏—Ç—å' : '–ó–∞–±–∞–Ω–∏—Ç—å',
            callback:
              status === 'banned'
                ? `chat_unban:${chatId}`
                : `chat_ban:${chatId}`,
          }),
          b({
            text: `üïí –õ–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏ (${config.historyLimit})`,
            callback: `admin_chat_history_limit:${chatId}`,
          }),
          b({
            text: `‚ú® –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–∞ (${config.interestInterval})`,
            callback: `admin_chat_interest_interval:${chatId}`,
          }),
          b({
            text: `üìù –í—Ä–µ–º—è —Å—Ç–∞—Ç—å–∏ (${config.topicTime ?? '‚Äî'})`,
            callback: `admin_chat_topic_time:${chatId}`,
          }),
        ],
      };
    }),
    r('admin_chat_history_limit', async ({ loadData }) => {
      const { chatId } = (await loadData()) as { chatId: number };
      return {
        text: `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∞—Ç–∞ ${chatId}:`,
        buttons: [],
      };
    }),
    r('admin_chat_interest_interval', async ({ loadData }) => {
      const { chatId } = (await loadData()) as { chatId: number };
      return {
        text: `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–∞ –¥–ª—è —á–∞—Ç–∞ ${chatId}:`,
        buttons: [],
      };
    }),
    r('admin_chat_topic_time', async ({ loadData }) => {
      const { chatId } = (await loadData()) as { chatId: number };
      return {
        text: `–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ç—å–∏ –¥–ª—è —á–∞—Ç–∞ ${chatId} (HH:MM):`,
        buttons: [],
      };
    }),
    r('chat_not_approved', async () => ({
      text: '–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.',
      buttons: [
        b({
          text: '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø',
          callback: 'chat_request',
          action: actions.requestChatAccess,
        }),
      ],
    })),
    r('no_access', async () => ({
      text: '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø.',
      buttons: [
        b({
          text: 'üîë –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø',
          callback: 'request_access',
          action: actions.requestUserAccess,
        }),
      ],
    })),
    r('chat_approval_request', async ({ loadData }) => {
      const { name, chatId } = (await loadData()) as {
        name: string;
        chatId: number;
      };
      return {
        text: `${name} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø`,
        buttons: [
          b({ text: '–†–∞–∑—Ä–µ—à–∏—Ç—å', callback: `chat_approve:${chatId}` }),
          b({ text: '–ó–∞–±–∞–Ω–∏—Ç—å', callback: `chat_ban:${chatId}` }),
        ],
      };
    }),
    r('user_access_request', async ({ loadData }) => {
      const { msg, chatId, userId } = (await loadData()) as {
        msg: string;
        chatId: number;
        userId: number;
      };
      return {
        text: msg,
        buttons: [
          b({ text: '–û–¥–æ–±—Ä–∏—Ç—å', callback: `user_approve:${chatId}:${userId}` }),
          b({ text: '–ó–∞–±–∞–Ω–∏—Ç—å —á–∞—Ç', callback: `chat_ban:${chatId}` }),
        ],
      };
    }),
  ];
}
