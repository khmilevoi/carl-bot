import type { Context, Telegraf } from 'telegraf';

import {
  branch,
  button,
  type ContextWithMatch,
  createRouter,
  type NavigateFn,
  type Route,
  route,
  type RunningRouter,
} from './inline-router';

// Actions –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å - —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ, –Ω–∏–∫–∞–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
interface Actions {
  // –≠–∫—Å–ø–æ—Ä—Ç –∏ –ø–∞–º—è—Ç—å
  exportData: (ctx: Context) => Promise<void>;
  resetMemory: (ctx: Context) => Promise<void>;

  // –ß–∞—Ç—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  getChats: () => Promise<{ id: number; title: string }[]>;
  getChatData: (chatId: number) => Promise<{
    chatId: number;
    status: string;
    config: {
      historyLimit: number;
      interestInterval: number;
      topicTime: string | null;
      topicTimezone: string;
    };
  }>;
  requestChatAccess: (ctx: Context) => Promise<void>;
  requestUserAccess: (ctx: Context) => Promise<void>;
  sendChatApprovalRequest: (chatId: number, title?: string) => Promise<void>;

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º
  approveChat: (chatId: number) => Promise<void>;
  banChat: (chatId: number) => Promise<void>;
  unbanChat: (chatId: number) => Promise<void>;
  approveUser: (chatId: number, userId: number) => Promise<Date>;

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  getChatConfig: (chatId: number) => Promise<{
    historyLimit: number;
    interestInterval: number;
    topicTime: string | null;
    topicTimezone: string;
  }>;
  setHistoryLimit: (
    chatId: number,
    limit: number,
    isAdmin: boolean
  ) => Promise<void>;
  setInterestInterval: (
    chatId: number,
    interval: number,
    isAdmin: boolean
  ) => Promise<void>;
  setTopicTime: (
    chatId: number,
    time: string,
    timezone: string
  ) => Promise<void>;

  // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  checkChatStatus: (chatId: number) => Promise<string>;
  processMessage: (ctx: Context) => Promise<void>;
  isAdmin: (userId: number) => boolean;
}

export type { Actions };

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ—É—Ç—ã (–∏–º–µ–Ω–∞ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã)

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–¥–º–∏–Ω —ç—Ç–æ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç
const Menu = route<Actions>('menu', async ({ ctx, actions, navigate }) => {
  if (actions.isAdmin(ctx.from?.id ?? 0)) {
    return navigate(AdminMenu);
  }
  return navigate(UserMenu);
});

// –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
const AdminMenu = route<Actions>('admin_menu', async () => ({
  text: '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
  buttons: [
    button({
      text: 'üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
      callback: 'admin_export',
      action: async ({ actions, ctx }) => {
        await actions.exportData(ctx);
      },
    }),
    button({
      text: 'üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏',
      callback: 'admin_chats',
      action: ({ navigate }) => navigate(AdminChats),
    }),
  ],
}));

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é
const UserMenu: Route<Actions> = route<Actions>('user_menu', async () => ({
  text: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
  buttons: [
    button({
      text: 'üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
      callback: 'export',
      action: async ({ actions, ctx }) => {
        await actions.exportData(ctx);
      },
    }),
    button({
      text: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å',
      callback: 'reset',
      action: async ({ actions, ctx }) => {
        await actions.resetMemory(ctx);
      },
    }),
    button({
      text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞',
      callback: 'settings',
      action: ({ navigate }) => navigate(ChatSettings),
    }),
  ],
}));

// –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
const AdminChats = route<Actions>('admin_chats', async ({ actions }) => {
  const chats = await actions.getChats();
  return {
    text:
      chats.length > 0 ? '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:' : '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤',
    buttons: chats.map((chat) =>
      button({
        text: `${chat.title} (${chat.id})`,
        callback: `chat_${chat.id}`,
        action: ({ navigate }) => navigate(AdminChat, { chatId: chat.id }),
      })
    ),
  };
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —á–∞—Ç–æ–º (–∞–¥–º–∏–Ω)
const AdminChat: Route<Actions, { chatId: number }> = route<
  Actions,
  { chatId: number }
>('admin_chat', async ({ actions, params }) => {
  const data = await actions.getChatData(params.chatId);
  const { chatId, status, config } = data;

  return {
    text: `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º ${chatId}\n–°—Ç–∞—Ç—É—Å: ${status}\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: ${config.historyLimit} —Å–æ–æ–±—â–µ–Ω–∏–π\n‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–∞: ${config.interestInterval} —Å–æ–æ–±—â–µ–Ω–∏–π\n‚Ä¢ –í—Ä–µ–º—è —Ç–µ–º—ã –¥–Ω—è: ${config.topicTime ?? '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`,
    buttons: [
      button({
        text: 'üìù –õ–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏',
        callback: 'history',
        action: ({ navigate }) => navigate(AdminChatHistoryLimit, params),
      }),
      button({
        text: 'üéØ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–∞',
        callback: 'interest',
        action: ({ navigate }) => navigate(AdminChatInterestInterval, params),
      }),
      button({
        text: 'üìÖ –í—Ä–µ–º—è —Ç–µ–º—ã –¥–Ω—è',
        callback: 'topic',
        action: ({ navigate }) => navigate(AdminChatTopicTime, params),
      }),
      ...({
        approved: [
          button<Actions>({
            text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',
            callback: `ban:${chatId}`,
            action: async ({ actions, navigate, ctx }) => {
              const match = (ctx as ContextWithMatch).match;
              const id = parseInt(match?.[1] ?? '0', 10);
              await actions.banChat(id);
              return navigate(AdminChat, { chatId: id });
            },
          }),
        ],
        banned: [
          button<Actions>({
            text: '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',
            callback: `unban:${chatId}`,
            action: async ({ actions, navigate, ctx }) => {
              const match = (ctx as ContextWithMatch).match;
              const id = parseInt(match?.[1] ?? '0', 10);
              await actions.unbanChat(id);
              return navigate(AdminChat, { chatId: id });
            },
          }),
        ],
      }[status as 'approved' | 'banned'] ?? []),
    ],
  };
});

// –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ä–æ—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤
const AdminChatHistoryLimit = route<Actions, { chatId: number }>(
  'admin_chat_history_limit',
  async ({ params }) => ({
    text: `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∞—Ç–∞ ${params.chatId} (–æ—Ç 1 –¥–æ 50):`,
    onText: async ({ text, actions, navigate }) => {
      const limit = parseInt(text, 10);
      await actions.setHistoryLimit(params.chatId, limit, true);
      return navigate(AdminChat, params);
    },
  })
);

const AdminChatInterestInterval = route<Actions, { chatId: number }>(
  'admin_chat_interest_interval',
  async ({ params }) => ({
    text: `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–∞ –¥–ª—è —á–∞—Ç–∞ ${params.chatId} (–æ—Ç 1 –¥–æ 50):`,
    onText: async ({
      text,
      actions,
      params,
      navigate,
    }: {
      text: string;
      actions: Actions;
      params: { chatId: number };
      navigate: NavigateFn<Actions>;
    }) => {
      const interval = parseInt(text, 10);
      await actions.setInterestInterval(params.chatId, interval, true);
      return navigate(AdminChat, params);
    },
  })
);

const AdminChatTopicTime = route<Actions, { chatId: number }>(
  'admin_chat_topic_time',
  async ({ params }) => ({
    text: `–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ç–µ–º—ã –¥–Ω—è –¥–ª—è —á–∞—Ç–∞ ${params.chatId} (—Ñ–æ—Ä–º–∞—Ç HH:MM):`,
    onText: async ({ text, navigate }) => {
      const time = text.trim();
      // –ü–æ–ª—É—á–∏–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –ø–µ—Ä–µ–π–¥–µ–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
      const date = new Date();
      const offset = -date.getTimezoneOffset();
      const hours = Math.floor(offset / 60);
      const sign = hours >= 0 ? '+' : '-';
      const timezone = `UTC${sign}${String(Math.abs(hours)).padStart(2, '0')}`;

      return navigate(AdminChatTopicTimezone, {
        chatId: params.chatId,
        time,
        timezone,
      });
    },
  })
);

const AdminChatTopicTimezone = route<
  Actions,
  { chatId: number; time: string; timezone: string }
>('admin_chat_topic_timezone', async ({ params }) => ({
  text: `–í—Ä–µ–º—è: ${params.time}\n–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${params.timezone}\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç:`,
  buttons: [
    button({
      text: `‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å ${params.timezone}`,
      callback: `accept:${params.chatId}:${params.time}:${params.timezone}`,
      action: async ({ actions, navigate, ctx }) => {
        const match = (ctx as ContextWithMatch).match;
        const chatId = parseInt(match?.[1] ?? '0', 10);
        const time = match?.[2] ?? '';
        const timezone = match?.[3] ?? 'UTC+00';

        await actions.setTopicTime(chatId, time, timezone);
        return navigate(AdminChat, { chatId });
      },
    }),
  ],
  onText: async ({
    text,
    actions,
    params,
    navigate,
  }: {
    text: string;
    actions: Actions;
    params: { chatId: number; time: string; timezone: string };
    navigate: NavigateFn<Actions>;
  }) => {
    const timezone = text.trim() || params.timezone;
    await actions.setTopicTime(params.chatId, params.time, timezone);
    return navigate(AdminChat, { chatId: params.chatId });
  },
}));

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
const ChatSettings: Route<Actions> = route<Actions>(
  'chat_settings',
  async ({ actions, ctx }) => {
    const chatId = ctx.chat?.id;
    if (!chatId) throw new Error('No chat ID');

    const config = await actions.getChatConfig(chatId);

    return {
      text: `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞\n\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: ${config.historyLimit} —Å–æ–æ–±—â–µ–Ω–∏–π\n‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–∞: ${config.interestInterval} —Å–æ–æ–±—â–µ–Ω–∏–π\n‚Ä¢ –í—Ä–µ–º—è —Ç–µ–º—ã –¥–Ω—è: ${config.topicTime ?? '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`,
      buttons: [
        button({
          text: 'üìù –õ–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏',
          callback: 'history',
          action: ({ navigate }) => navigate(ChatHistoryLimit),
        }),
        button({
          text: 'üéØ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–∞',
          callback: 'interest',
          action: ({ navigate }) => navigate(ChatInterestInterval),
        }),
        button({
          text: 'üìÖ –í—Ä–µ–º—è —Ç–µ–º—ã –¥–Ω—è',
          callback: 'topic',
          action: ({ navigate }) => navigate(ChatTopicTime),
        }),
      ],
    };
  }
);

const ChatHistoryLimit: Route<Actions> = route<Actions>(
  'chat_history_limit',
  async () => ({
    text: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏ (–æ—Ç 1 –¥–æ 50):',
    onText: async ({
      text,
      actions,
      ctx,
      navigate,
    }: {
      text: string;
      actions: Actions;
      ctx: Context;
      navigate: NavigateFn<Actions>;
    }) => {
      const chatId = ctx.chat?.id;
      if (!chatId) throw new Error('No chat ID');

      const limit = parseInt(text, 10);
      await actions.setHistoryLimit(chatId, limit, false);
      return navigate(UserMenu);
    },
  })
);

const ChatInterestInterval: Route<Actions> = route<Actions>(
  'chat_interest_interval',
  async () => ({
    text: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–∞ (–æ—Ç 1 –¥–æ 50):',
    onText: async ({
      text,
      actions,
      ctx,
      navigate,
    }: {
      text: string;
      actions: Actions;
      ctx: Context;
      navigate: NavigateFn<Actions>;
    }) => {
      const chatId = ctx.chat?.id;
      if (!chatId) throw new Error('No chat ID');

      const interval = parseInt(text, 10);
      await actions.setInterestInterval(chatId, interval, false);
      return navigate(UserMenu);
    },
  })
);

const ChatTopicTime: Route<Actions> = route<Actions>(
  'chat_topic_time',
  async () => ({
    text: '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ç–µ–º—ã –¥–Ω—è (—Ñ–æ—Ä–º–∞—Ç HH:MM):',
    onText: async ({
      text,
      ctx,
      navigate,
    }: {
      text: string;
      actions: Actions;
      ctx: Context;
      navigate: NavigateFn<Actions>;
    }) => {
      const chatId = ctx.chat?.id;
      if (!chatId) throw new Error('No chat ID');

      const time = text.trim();
      const date = new Date();
      const offset = -date.getTimezoneOffset();
      const hours = Math.floor(offset / 60);
      const sign = hours >= 0 ? '+' : '-';
      const timezone = `UTC${sign}${String(Math.abs(hours)).padStart(2, '0')}`;

      return navigate(ChatTopicTimezone, { time, timezone });
    },
  })
);

const ChatTopicTimezone: Route<Actions, { time: string; timezone: string }> =
  route<Actions, { time: string; timezone: string }>(
    'chat_topic_timezone',
    async ({ params }) => ({
      text: `–í—Ä–µ–º—è: ${params.time}\n–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${params.timezone}\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç:`,
      buttons: [
        button({
          text: `‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å ${params.timezone}`,
          callback: `accept:${params.time}:${params.timezone}`,
          action: async ({ actions, ctx, navigate }) => {
            const chatId = ctx.chat?.id;
            if (!chatId) throw new Error('No chat ID');

            const match = (ctx as ContextWithMatch).match;
            const time = match?.[1] ?? '';
            const timezone = match?.[2] ?? 'UTC+00';

            await actions.setTopicTime(chatId, time, timezone);
            return navigate(UserMenu);
          },
        }),
      ],
      onText: async ({
        text,
        actions,
        ctx,
        params,
        navigate,
      }: {
        text: string;
        actions: Actions;
        ctx: Context;
        params: { time: string; timezone: string };
        navigate: NavigateFn<Actions>;
      }) => {
        const chatId = ctx.chat?.id;
        if (!chatId) throw new Error('No chat ID');

        const timezone = text.trim() || params.timezone;
        await actions.setTopicTime(chatId, params.time, timezone);
        return navigate(UserMenu);
      },
    })
  );

// –†–æ—É—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—à–∏–±–æ–∫
const ChatNotApproved: Route<Actions> = route<Actions>(
  'chat_not_approved',
  async () => ({
    text: '–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.',
    buttons: [
      button({
        text: 'üìù –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø',
        callback: 'request_access',
        action: async ({ actions, ctx }) => {
          await actions.requestChatAccess(ctx);
        },
      }),
    ],
  })
);

const NoAccess: Route<Actions> = route<Actions>('no_access', async () => ({
  text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.',
  buttons: [
    button({
      text: 'üìù –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø',
      callback: 'request_user_access',
      action: async ({ actions, ctx }) => {
        await actions.requestUserAccess(ctx);
      },
    }),
  ],
}));

const ChatApprovalRequest: Route<Actions, { name: string; chatId: number }> =
  route<Actions, { name: string; chatId: number }>(
    'chat_approval_request',
    async ({ params }) => ({
      text: `–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞:\n\n${params.name}\n\n–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø?`,
      buttons: [
        button({
          text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å',
          callback: 'approve',
          action: async ({ actions, ctx }) => {
            const match = (ctx as ContextWithMatch).match;
            const chatId = parseInt(match?.[1] ?? '0', 10);
            await actions.approveChat(chatId);
          },
          answer: { text: '–ß–∞—Ç –æ–¥–æ–±—Ä–µ–Ω' },
        }),
        button({
          text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',
          callback: 'ban',
          action: async ({ actions, ctx }) => {
            const match = (ctx as ContextWithMatch).match;
            const chatId = parseInt(match?.[1] ?? '0', 10);
            await actions.banChat(chatId);
          },
          answer: { text: '–ß–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' },
        }),
      ],
    })
  );

const UserAccessRequest: Route<
  Actions,
  { msg: string; chatId: number; userId: number }
> = route<Actions, { msg: string; chatId: number; userId: number }>(
  'user_access_request',
  async ({ params }) => ({
    text: `–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º:\n\n${params.msg}\n\n–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø?`,
    buttons: [
      button({
        text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø',
        callback: 'approve_user',
        action: async ({ actions, ctx }) => {
          const match = (ctx as ContextWithMatch).match;
          const chatId = parseInt(match?.[1] ?? '0', 10);
          const userId = parseInt(match?.[2] ?? '0', 10);
          const expiresAt = await actions.approveUser(chatId, userId);
          await ctx.reply(
            `–û–¥–æ–±—Ä–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ ${chatId} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}\n–î–æ—Å—Ç—É–ø –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${expiresAt.toISOString()}`
          );
        },
      }),
    ],
  })
);

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
// eslint-disable-next-line import/no-unused-modules
export const router = createRouter<Actions>(
  [
    // –ö–æ—Ä–Ω–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å
    {
      route: Menu,
      children: [
        // –ê–¥–º–∏–Ω—Å–∫–∞—è –≤–µ—Ç–∫–∞
        {
          route: AdminMenu,
          hasBack: true,
          children: [
            {
              route: AdminChats,
              hasBack: true,
              children: [
                {
                  route: AdminChat,
                  hasBack: true,
                  children: [
                    { route: AdminChatHistoryLimit, hasBack: true },
                    { route: AdminChatInterestInterval, hasBack: true },
                    {
                      route: AdminChatTopicTime,
                      hasBack: true,
                      children: [
                        { route: AdminChatTopicTimezone, hasBack: true },
                      ],
                    },
                  ],
                },
              ],
            },
            { route: ChatApprovalRequest, hasBack: true },
            { route: UserAccessRequest, hasBack: true },
          ],
        },

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –≤–µ—Ç–∫–∞
        {
          route: UserMenu,
          hasBack: true,
          children: [
            {
              route: ChatSettings,
              hasBack: true,
              children: [
                { route: ChatHistoryLimit, hasBack: true },
                { route: ChatInterestInterval, hasBack: true },
                {
                  route: ChatTopicTime,
                  hasBack: true,
                  children: [{ route: ChatTopicTimezone, hasBack: true }],
                },
              ],
            },
          ],
        },
      ],
    },

    // –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–æ—É—Ç—ã –±–µ–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏
    ChatNotApproved,
    NoAccess,
  ],
  [
    // Branches –¥–ª—è –∫–æ–º–∞–Ω–¥
    branch('menu', '–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é', Menu),
    branch('start', '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', Menu),
  ],
  {
    backLabel: '‚Üê –ù–∞–∑–∞–¥',
    cancelLabel: '‚ùå –û—Ç–º–µ–Ω–∞',
    inputPrompt: '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:',
    errorDefaultText: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
  }
);

// Setup —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
// eslint-disable-next-line import/no-unused-modules
export function setupBotRouting(
  bot: Telegraf,
  actions: Actions
): RunningRouter<Actions> {
  const running = router.run(bot, actions);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ my_chat_member —á–µ—Ä–µ–∑ onConnect
  running.onConnect(async (ctx) => {
    const chatId = ctx.chat?.id;
    if (!chatId) return;

    const status = await actions.checkChatStatus(chatId);
    if (status !== 'approved') {
      await running.navigate(ctx, ChatNotApproved);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä –ø–∞–π–ø–ª–∞–π–Ω–∞
  running.onText(async (ctx) => {
    await actions.processMessage(ctx);
  });

  return running;
}
