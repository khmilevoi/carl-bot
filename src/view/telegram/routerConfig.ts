import type { Context } from 'telegraf';

import { button, cb, DSL, route } from './telegraf-inline-router';

interface ChatConfigParams {
  historyLimit: number;
  interestInterval: number;
  topicTime: string | null;
  topicTimezone: string;
}

interface AdminChatParams {
  chatId: number;
  status: string;
  config: ChatConfigParams;
}

// eslint-disable-next-line import/no-unused-modules
export interface Actions {
  exportData(ctx: Context): Promise<void> | void;
  resetMemory(ctx: Context): Promise<void> | void;
  requestChatAccess(ctx: Context): Promise<void> | void;
  requestUserAccess(ctx: Context): Promise<void> | void;
  showAdminChats(ctx: Context): Promise<void> | void;
  showChatSettings(ctx: Context): Promise<void> | void;
  configHistoryLimit(ctx: Context): Promise<void> | void;
  configInterestInterval(ctx: Context): Promise<void> | void;
  configTopicTime(ctx: Context): Promise<void> | void;
  showAdminChat(ctx: Context, chatId: number): Promise<void> | void;
  handleAdminConfigHistoryLimit(
    ctx: Context,
    chatId: number
  ): Promise<void> | void;
  handleAdminConfigInterestInterval(
    ctx: Context,
    chatId: number
  ): Promise<void> | void;
  handleAdminConfigTopicTime(
    ctx: Context,
    chatId: number
  ): Promise<void> | void;
  approveChat(ctx: Context, chatId: number): Promise<void> | void;
  banChat(ctx: Context, chatId: number): Promise<void> | void;
  unbanChat(ctx: Context, chatId: number): Promise<void> | void;
  approveUser(
    ctx: Context,
    chatId: number,
    userId: number
  ): Promise<void> | void;
}

const { row, rows } = DSL;

const menu = route<Actions>({
  id: 'menu',
  async action({ actions }) {
    return {
      text: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      buttons: rows(
        row(
          button({
            text: 'üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
            callback: cb('export_data'),
            action: ({ ctx }) => actions.exportData(ctx),
          })
        ),
        row(
          button({
            text: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å',
            callback: cb('reset_memory'),
            action: ({ ctx }) => actions.resetMemory(ctx),
          })
        ),
        row(
          button({
            text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            callback: cb('chat_settings'),
            action: ({ ctx }) => actions.showChatSettings(ctx),
          })
        )
      ),
    };
  },
});

const chatSettings = route<Actions, ChatConfigParams>({
  id: 'chat_settings',
  async action({ params, actions }) {
    const config = params;
    return {
      text: '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:',
      buttons: rows(
        row(
          button({
            text: `üïí –õ–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏ (${config.historyLimit})`,
            callback: cb('config_history_limit'),
            action: ({ ctx }) => actions.configHistoryLimit(ctx),
          })
        ),
        row(
          button({
            text: `‚ú® –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–∞ (${config.interestInterval})`,
            callback: cb('config_interest_interval'),
            action: ({ ctx }) => actions.configInterestInterval(ctx),
          })
        ),
        row(
          button({
            text: `üìù –í—Ä–µ–º—è —Å—Ç–∞—Ç—å–∏ (${config.topicTime ?? '‚Äî'})`,
            callback: cb('config_topic_time'),
            action: ({ ctx }) => actions.configTopicTime(ctx),
          })
        )
      ),
    };
  },
});

const chatHistoryLimit = route<Actions>({
  id: 'chat_history_limit',
  waitForText: true,
  async action() {
    return { text: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏:', buttons: [] };
  },
});

const chatInterestInterval = route<Actions>({
  id: 'chat_interest_interval',
  waitForText: true,
  async action() {
    return { text: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–∞:', buttons: [] };
  },
});

const chatTopicTime = route<Actions>({
  id: 'chat_topic_time',
  waitForText: true,
  async action() {
    return { text: '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ç—å–∏ (HH:MM):', buttons: [] };
  },
});

const chatTopicTimezone = route<Actions, { timezone: string }>({
  id: 'chat_topic_timezone',
  waitForText: true,
  async action({ params }) {
    return {
      text: `–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (${params.timezone}). –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:`,
      buttons: [],
    };
  },
});

const adminMenu = route<Actions>({
  id: 'admin_menu',
  async action({ actions }) {
    return {
      text: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      buttons: rows(
        row(
          button({
            text: 'üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
            callback: cb('admin_export_data'),
            action: ({ ctx }) => actions.exportData(ctx),
          })
        ),
        row(
          button({
            text: 'üí¨ –ß–∞—Ç—ã',
            callback: cb('admin_chats'),
            action: ({ ctx }) => actions.showAdminChats(ctx),
          })
        )
      ),
    };
  },
});

const adminChats = route<Actions, { id: number; title: string }[]>({
  id: 'admin_chats',
  async action({ params, actions }) {
    const chats = params;
    if (!chats?.length) {
      return { text: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤', buttons: [] };
    }
    return {
      text: '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:',
      buttons: rows(
        ...chats.map((chat) =>
          row(
            button({
              text: `${chat.title} (${chat.id})`,
              callback: cb('admin_chat', [chat.id]),
              action: ({ ctx }) => actions.showAdminChat(ctx, chat.id),
            })
          )
        )
      ),
    };
  },
});

const adminChat = route<Actions, AdminChatParams | void>({
  id: 'admin_chat',
  async action({ ctx, params, actions }) {
    if (!params) {
      const chatId = Number((ctx as Context & { match?: string[] }).match?.[1]);
      await actions.showAdminChat(ctx, chatId);
      return;
    }
    const { chatId, status, config } = params;
    return {
      text: `–°—Ç–∞—Ç—É—Å —á–∞—Ç–∞ ${chatId}: ${status}`,
      buttons: rows(
        row(
          button({
            text: status === 'banned' ? '–†–∞–∑–±–∞–Ω–∏—Ç—å' : '–ó–∞–±–∞–Ω–∏—Ç—å',
            callback: cb(status === 'banned' ? 'chat_unban' : 'chat_ban', [
              chatId,
            ]),
            action: ({ ctx }) =>
              status === 'banned'
                ? actions.unbanChat(ctx, chatId)
                : actions.banChat(ctx, chatId),
          })
        ),
        row(
          button({
            text: `üïí –õ–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏ (${config.historyLimit})`,
            callback: cb('admin_chat_history_limit', [chatId]),
            action: ({ ctx }) =>
              actions.handleAdminConfigHistoryLimit(ctx, chatId),
          })
        ),
        row(
          button({
            text: `‚ú® –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–∞ (${config.interestInterval})`,
            callback: cb('admin_chat_interest_interval', [chatId]),
            action: ({ ctx }) =>
              actions.handleAdminConfigInterestInterval(ctx, chatId),
          })
        ),
        row(
          button({
            text: `üìù –í—Ä–µ–º—è —Å—Ç–∞—Ç—å–∏ (${config.topicTime ?? '‚Äî'})`,
            callback: cb('admin_chat_topic_time', [chatId]),
            action: ({ ctx }) =>
              actions.handleAdminConfigTopicTime(ctx, chatId),
          })
        )
      ),
    };
  },
});

const adminChatHistoryLimit = route<Actions, { chatId: number } | void>({
  id: 'admin_chat_history_limit',
  waitForText: true,
  async action({ ctx, params, actions }) {
    if (!params) {
      const chatId = Number((ctx as Context & { match?: string[] }).match?.[1]);
      await actions.handleAdminConfigHistoryLimit(ctx, chatId);
      return;
    }
    return {
      text: `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∞—Ç–∞ ${params.chatId}:`,
      buttons: [],
    };
  },
});

const adminChatInterestInterval = route<Actions, { chatId: number } | void>({
  id: 'admin_chat_interest_interval',
  waitForText: true,
  async action({ ctx, params, actions }) {
    if (!params) {
      const chatId = Number((ctx as Context & { match?: string[] }).match?.[1]);
      await actions.handleAdminConfigInterestInterval(ctx, chatId);
      return;
    }
    return {
      text: `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–∞ –¥–ª—è —á–∞—Ç–∞ ${params.chatId}:`,
      buttons: [],
    };
  },
});

const adminChatTopicTime = route<Actions, { chatId: number } | void>({
  id: 'admin_chat_topic_time',
  waitForText: true,
  async action({ ctx, params, actions }) {
    if (!params) {
      const chatId = Number((ctx as Context & { match?: string[] }).match?.[1]);
      await actions.handleAdminConfigTopicTime(ctx, chatId);
      return;
    }
    return {
      text: `–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ç—å–∏ –¥–ª—è —á–∞—Ç–∞ ${params.chatId} (HH:MM):`,
      buttons: [],
    };
  },
});

const adminChatTopicTimezone = route<
  Actions,
  { chatId: number; timezone: string }
>({
  id: 'admin_chat_topic_timezone',
  waitForText: true,
  async action({ params }) {
    const { chatId, timezone } = params;
    return {
      text: `–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —á–∞—Ç–∞ ${chatId} (${timezone}). –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:`,
      buttons: [],
    };
  },
});

const chatNotApproved = route<Actions>({
  id: 'chat_not_approved',
  async action({ actions }) {
    return {
      text: '–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.',
      buttons: rows(
        row(
          button({
            text: '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø',
            callback: cb('chat_request'),
            action: ({ ctx }) => actions.requestChatAccess(ctx),
          })
        )
      ),
    };
  },
});

const noAccess = route<Actions>({
  id: 'no_access',
  async action({ actions }) {
    return {
      text: '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø.',
      buttons: rows(
        row(
          button({
            text: 'üîë –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø',
            callback: cb('request_access'),
            action: ({ ctx }) => actions.requestUserAccess(ctx),
          })
        )
      ),
    };
  },
});

const chatApprovalRequest = route<Actions, { name: string; chatId: number }>({
  id: 'chat_approval_request',
  async action({ params, actions }) {
    return {
      text: `${params.name} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø`,
      buttons: rows(
        row(
          button({
            text: '–†–∞–∑—Ä–µ—à–∏—Ç—å',
            callback: cb('chat_approve', [params.chatId]),
            action: ({ ctx }) => actions.approveChat(ctx, params.chatId),
          }),
          button({
            text: '–ó–∞–±–∞–Ω–∏—Ç—å',
            callback: cb('chat_ban', [params.chatId]),
            action: ({ ctx }) => actions.banChat(ctx, params.chatId),
          })
        )
      ),
    };
  },
});

const userAccessRequest = route<
  Actions,
  {
    msg: string;
    chatId: number;
    userId: number;
  }
>({
  id: 'user_access_request',
  async action({ params, actions }) {
    return {
      text: params.msg,
      buttons: rows(
        row(
          button({
            text: '–û–¥–æ–±—Ä–∏—Ç—å',
            callback: cb('user_approve', [params.chatId, params.userId]),
            action: ({ ctx }) =>
              actions.approveUser(ctx, params.chatId, params.userId),
          })
        ),
        row(
          button({
            text: '–ó–∞–±–∞–Ω–∏—Ç—å —á–∞—Ç',
            callback: cb('chat_ban', [params.chatId]),
            action: ({ ctx }) => actions.banChat(ctx, params.chatId),
          })
        )
      ),
    };
  },
});

const chatApprove = route<Actions>({
  id: 'chat_approve',
  async action({ ctx, actions }) {
    const chatId = Number((ctx as Context & { match?: string[] }).match?.[1]);
    await actions.approveChat(ctx, chatId);
  },
});

const chatBan = route<Actions>({
  id: 'chat_ban',
  async action({ ctx, actions }) {
    const chatId = Number((ctx as Context & { match?: string[] }).match?.[1]);
    await actions.banChat(ctx, chatId);
  },
});

const chatUnban = route<Actions>({
  id: 'chat_unban',
  async action({ ctx, actions }) {
    const chatId = Number((ctx as Context & { match?: string[] }).match?.[1]);
    await actions.unbanChat(ctx, chatId);
  },
});

const userApprove = route<Actions>({
  id: 'user_approve',
  async action({ ctx, actions }) {
    const match = (ctx as Context & { match?: string[] }).match;
    const chatId = Number(match?.[1]);
    const userId = Number(match?.[2]);
    await actions.approveUser(ctx, chatId, userId);
  },
});

// eslint-disable-next-line import/no-unused-modules
export const routes = [
  {
    route: menu,
    children: [
      {
        route: chatSettings,
        hasBack: true,
        children: [
          chatHistoryLimit,
          chatInterestInterval,
          chatTopicTime,
          chatTopicTimezone,
        ],
      },
    ],
  },
  {
    route: adminMenu,
    children: [
      {
        route: adminChats,
        hasBack: true,
        children: [
          {
            route: adminChat,
            hasBack: true,
            children: [
              adminChatHistoryLimit,
              adminChatInterestInterval,
              adminChatTopicTime,
              adminChatTopicTimezone,
            ],
          },
        ],
      },
    ],
  },
  { route: chatNotApproved },
  { route: noAccess },
  { route: chatApprovalRequest },
  { route: userAccessRequest },
  { route: chatApprove },
  { route: chatBan },
  { route: chatUnban },
  { route: userApprove },
];
