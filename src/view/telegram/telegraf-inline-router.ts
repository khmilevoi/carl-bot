// telegraf-inline-router.ts (v10)
// Router for Telegraf inline keyboards with typed routes, text-input flows, back navigation,
// render modes (incl. smart), cancel flow, improved state key, user-friendly error handling,
// simple per-user mutex, async StateStore/TokenStore abstractions, DSL helpers, versioned callbacks,
// per-view showBack/showCancel overrides, improved naming, message pruning, and JSDoc.

import type { Context, Telegraf } from 'telegraf';
import { Markup } from 'telegraf';
import type {
  InlineKeyboardMarkup,
  Message,
} from 'telegraf/typings/core/types/typegram';

// ============================================================================
// üìö Public API Types
// ============================================================================

/** Rendering strategy for route views. */
export type RenderMode = 'edit' | 'replace' | 'append' | 'smart';

/**
 * RouteView ‚Äî –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞.
 * @template A –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π (actions) –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export type RouteView<A = unknown> = {
  /** –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. */
  text: string;
  /** –ö–Ω–æ–ø–∫–∏ (—Å—Ç—Ä–æ–∫–∏ –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –º–∞—Å—Å–∏–≤–∞–º–∏). */
  buttons?: Array<Button<A> | Button<A>[]>;
  /** –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫. */
  disablePreview?: boolean;
  /** –ü–µ—Ä–µ–∫—Ä—ã—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–µ–Ω–¥–µ—Ä–∞. */
  renderMode?: RenderMode;
  /** –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª (–ª–æ–∫–∞–ª—å–Ω—ã–π override). */
  showBack?: boolean;
  /** –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∞¬ª (–ª–æ–∫–∞–ª—å–Ω—ã–π override). */
  showCancel?: boolean;
};

/**
 * –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
 * @template A –¢–∏–ø actions
 * @template P –¢–∏–ø params —Ç–µ–∫—É—â–µ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
 * @template NP –¢–∏–ø params —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
 * @param route –¶–µ–ª–µ–≤–æ–π —Ä–æ—É—Ç
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–æ—É—Ç–∞
 */
export type NavigateFn<A = unknown> = <NP = unknown>(
  route: Route<A, NP>,
  params?: NP
) => Promise<void>;

/**
 * –ê—Ä–≥—É–º–µ–Ω—Ç—ã —ç–∫—à–µ–Ω–∞ —Ä–æ—É—Ç–∞.
 * @template A –¢–∏–ø actions
 * @template P –¢–∏–ø params
 */
export type RouteActionArgs<A = unknown, P = unknown> = {
  /** telegraf ctx */
  ctx: Context;
  /** –í–∞—à –æ–±—ä–µ–∫—Ç –¥–µ–π—Å—Ç–≤–∏–π (–¥–æ–º–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∏ —Ç. –ø.) */
  actions: A;
  /** –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–æ—É—Ç–∞ */
  params: P;
  /** –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥–æ–π —Ä–æ—É—Ç */
  navigate: NavigateFn<A>;
  /** –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–æ—É—Ç */
  navigateBack: () => Promise<void>;
  /** –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ (–¥–ª—è —á—Ç–µ–Ω–∏—è) */
  state: RouterState;
};

/**
 * –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ—É—Ç–∞.
 * @template A –¢–∏–ø actions
 * @template P –¢–∏–ø params
 */
export type Route<A = unknown, P = unknown> = {
  /** –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ä–æ—É—Ç–∞ */
  id: string;
  /** –ï—Å–ª–∏ true ‚Äî —Ä–æ—É—Ç –æ–∂–∏–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ */
  waitForText?: boolean;
  /** –≠–∫—à–µ–Ω —Ä–æ—É—Ç–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç View (–¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞) –∏–ª–∏ –Ω–∏—á–µ–≥–æ (–µ—Å–ª–∏ —Å–∞–º –Ω–∞–≤–∏–≥–∏—Ä—É–µ—Ç) */
  action: (
    args: RouteActionArgs<A, P>
  ) => Promise<void | RouteView<A>> | void | RouteView<A>;
};

/**
 * –û–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
 * @template A –¢–∏–ø actions
 */
export type Button<A = unknown> = {
  /** –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ */
  text: string;
  /** –î–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–±—ç–∫–∞ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ cb/cbTok) */
  callback: string;
  /** –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞–∂–∞—Ç–∏—è */
  action?: (args: {
    ctx: Context;
    actions: A;
    navigate: NavigateFn<A>;
    navigateBack: () => Promise<void>;
  }) => Promise<void> | void;
};

/**
 * –£–∑–µ–ª –¥–µ—Ä–µ–≤–∞ —Ä–æ—É—Ç–∏–Ω–≥–∞ (–¥–ª—è —Å–±–æ—Ä–∫–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è hasBack).
 */
export type RouteNode<A = unknown> = {
  route: Route<A, unknown>;
  /** –î–æ–±–∞–≤–∏—Ç—å ¬´–ù–∞–∑–∞–¥¬ª –¥–ª—è —ç—Ç–æ–≥–æ —É–∑–ª–∞ –∏ –≤—Å–µ—Ö ¬´–ø—Ä–æ—Å—Ç—ã—Ö¬ª –¥–µ—Ç–µ–π */
  hasBack?: boolean; // default: false
  /** –î–æ—á–µ—Ä–Ω–∏–µ —Ä–æ—É—Ç—ã (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–∞–∫ Route –∏–ª–∏ –∫–∞–∫ RouteNode) */
  children?: Array<RouteNode<A> | Route<A, unknown>>;
};

/**
 * –•—Ä–∞–Ω–∏–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ (–Ω–∞ —Å–µ—Å—Å–∏—é chatId:userId).
 */
export type RouterState = {
  /** –°—Ç–µ–∫ ID —Ä–æ—É—Ç–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */
  stack: string[];
  /** –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∂–¥–æ–≥–æ —Ä–æ—É—Ç–∞ –ø–æ –µ–≥–æ ID */
  params: Record<string, unknown>;
  /** –ö–∞–∫–æ–π —Ä–æ—É—Ç —Å–µ–π—á–∞—Å –∂–¥—ë—Ç —Ç–µ–∫—Å—Ç */
  awaitingTextRouteId?: string;
  /**
   * –ú–µ—Ç–∞ –ø–æ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ edit/delete –∏ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ messageId).
   * –î–µ—Ä–∂–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π (—Å–º. StartOptions.maxMessages)
   */
  messages: Array<{
    messageId: number;
    text: string;
    buttons: Button<unknown>[][];
    showBack: boolean;
    showCancel: boolean;
  }>;
};

/**
 * –û–ø—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞.
 * @template A –¢–∏–ø actions
 */
export type StartOptions = {
  /** –¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞, –∫–æ–≥–¥–∞ waitForText=true */
  inputPrompt?: string;
  /** –ü–æ–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª */
  backLabel?: string;
  /** callback_data –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª */
  backCallbackData?: string;
  /** –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–µ–Ω–¥–µ—Ä–∞ —ç–∫—Ä–∞–Ω–æ–≤ */
  renderMode?: RenderMode;
  /** –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º edit */
  onEditFail?: 'reply' | 'replace' | 'ignore';
  /** –†–µ–∂–∏–º —Ä–µ–Ω–¥–µ—Ä–∞ –æ—à–∏–±–æ–∫ */
  errorRenderMode?: RenderMode;
  /** –ü—Ä–µ—Ñ–∏–∫—Å –≤ —Ç–µ–∫—Å—Ç–µ –æ—à–∏–±–æ–∫ */
  errorPrefix?: string;
  /** –ü–æ–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª (–¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞) */
  cancelLabel?: string;
  /** callback_data –∫–Ω–æ–ø–∫–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª */
  cancelCallbackData?: string;
  /** –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è ¬´–æ—Ç–º–µ–Ω–æ–π¬ª –≤ —Ç–µ–∫—Å—Ç–µ */
  cancelCommands?: string[];
  /** –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∞¬ª –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–≤–æ–¥–∞ */
  showCancelOnWait?: boolean;
  /** –í–µ—Ä—Å–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ callback_data –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
  cbVersion?: string;
  /** –•—É–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ */
  onError?: (err: unknown, ctx: Context, state: RouterState) => void;
  /** –í–Ω–µ—à–Ω–µ–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (Redis/DB); –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ */
  stateStore?: StateStore;
  /** –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö payload; –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ */
  tokenStore?: TokenStore;
  /** –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –≤ state.messages; –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∏–∑ state –∏ –∏–∑ —á–∞—Ç–∞ */
  maxMessages?: number;
};

// ============================================================================
// üîî Errors & Helpers
// ============================================================================

/**
 * –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã—Ö (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö) –æ—à–∏–±–æ–∫ –≤ —ç–∫—à–µ–Ω–∞—Ö.
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ View (–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º errorPrefix).
 */
export class RouterUserError extends Error {
  /** –ö–∞—Å—Ç–æ–º–Ω—ã–π View –¥–ª—è –æ—à–∏–±–∫–∏ (—á–∞—Å—Ç–∏—á–Ω—ã–π) */
  view?: Partial<RouteView<unknown>>;
  constructor(message: string, view?: Partial<RouteView<unknown>>) {
    super(message);
    this.name = 'RouterUserError';
    this.view = view;
  }
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —ç–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É `ctx.match` (–∫–∞–∫ –≤ telegraf Hears/Action).
 * @param ctx Telegraf Context
 * @returns –ú–∞—Å—Å–∏–≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏–ª–∏ undefined
 */
export function getMatch(ctx: Context): readonly string[] | undefined {
  return (ctx as Context & { match?: string[] }).match;
}

// ============================================================================
// üß± DSL (Public)
// ============================================================================

/**
 * –ù–∞–±–æ—Ä —Ö–µ–ª–ø–µ—Ä–æ–≤ –¥–ª—è –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–±–æ—Ä–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä.
 */
export const DSL = {
  /**
   * –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫.
   * @template A
   * @param btns –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
   * @returns –°—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫ (–º–∞—Å—Å–∏–≤)
   */
  row<A = unknown>(...btns: Button<A>[]): Button<A>[] {
    return btns;
  },

  /**
   * –ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫.
   * @template A
   * @param lines –°—Ç—Ä–æ–∫–∏ (–∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ‚Äî –±—É–¥—É—Ç –æ–±—ë—Ä–Ω—É—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É)
   * @returns –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
   */
  rows<A = unknown>(
    ...lines: Array<Button<A> | Button<A>[]>
  ): Array<Button<A> | Button<A>[]> {
    return lines;
  },

  /**
   * –ü–µ–π–¥–∂–µ—Ä (—Å—Ç—Ä–æ–∫–∞ –∏–∑ Prev/Next).
   * @template A
   * @param page –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (1..pages)
   * @param pages –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
   * @param prev –ö–Ω–æ–ø–∫–∞ ¬´–Ω–∞–∑–∞–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ¬ª
   * @param next –ö–Ω–æ–ø–∫–∞ ¬´–≤–ø–µ—Ä—ë–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ¬ª
   */
  pager<A = unknown>(
    page: number,
    pages: number,
    prev: Button<A>,
    next: Button<A>
  ): Button<A>[] {
    const out: Button<A>[] = [];
    if (page > 1) out.push(prev);
    if (page < pages) out.push(next);
    return out;
  },
};

// ============================================================================
// üóÉÔ∏è StateStore & TokenStore
// ============================================================================

/** –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∞–¥–∞–ø—Ç–µ—Ä –ø–æ–¥ Redis/DB. */
export interface StateStore {
  /** –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  get(chatId: number, userId: number): Promise<RouterState | undefined>;
  /** –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ */
  set(chatId: number, userId: number, state: RouterState): Promise<void>;
  /** –£–¥–∞–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ */
  delete(chatId: number, userId: number): Promise<void>;
}

/** In-memory —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è StateStore (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏/–æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞). */
class InMemoryStateStore implements StateStore {
  private map = new Map<string, RouterState>();
  async get(chatId: number, userId: number): Promise<RouterState | undefined> {
    return this.map.get(`${chatId}:${userId}`);
  }
  async set(chatId: number, userId: number, state: RouterState): Promise<void> {
    this.map.set(`${chatId}:${userId}`, state);
  }
  async delete(chatId: number, userId: number): Promise<void> {
    this.map.delete(`${chatId}:${userId}`);
  }
}

/** –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö payload (callback_data ‚Üí token ‚Üí payload). */
export interface TokenStore {
  /** –°–æ—Ö—Ä–∞–Ω–∏—Ç—å payload –∏ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–∫–µ–Ω (—Å TTL, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω) */
  save(data: unknown, ttlMs?: number): Promise<string> | string;
  /** –ó–∞–≥—Ä—É–∑–∏—Ç—å payload –ø–æ —Ç–æ–∫–µ–Ω—É */
  load(token: string): Promise<unknown | undefined> | unknown | undefined;
  /** –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  delete?(token: string): Promise<void> | void;
}

/** In-memory —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è TokenStore (TTL –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø—Ä–æ—Ü–µ—Å—Å–∞). */
class InMemoryTokenStore implements TokenStore {
  private map = new Map<string, { data: unknown; exp?: number }>();
  save(data: unknown, ttlMs?: number): string {
    const token = Math.random().toString(36).slice(2, 10);
    const exp = ttlMs ? Date.now() + ttlMs : undefined;
    this.map.set(token, { data, exp });
    return token;
  }
  load(token: string): unknown | undefined {
    const rec = this.map.get(token);
    if (!rec) return undefined;
    if (rec.exp && Date.now() > rec.exp) {
      this.map.delete(token);
      return undefined;
    }
    return rec.data;
  }
  delete(token: string): void {
    this.map.delete(token);
  }
}

// ============================================================================
// üîó Callback helpers (versioned)
// ============================================================================

/**
 * –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å callback_data —Å –≤–µ—Ä—Å–∏–µ–π.
 * @param routeId ID —Ä–æ—É—Ç–∞
 * @param args –ê—Ä–≥—É–º–µ–Ω—Ç—ã, —Ä–∞–∑–¥–µ–ª—è–µ–º—ã–µ ':'
 * @param cbVersion –í–µ—Ä—Å–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'v1')
 * @returns –°—Ç—Ä–æ–∫–∞ callback_data –≤–∏–¥–∞ `route!vX:...`
 */
export function cb(
  routeId: string,
  args: Array<string | number> = [],
  cbVersion = 'v1'
): string {
  const tail = args.length ? `:${args.join(':')}` : '';
  return `${routeId}!${cbVersion}${tail}`;
}

/**
 * –†–∞–∑–æ–±—Ä–∞—Ç—å callback_data, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ cb/cbTok.
 * @param data –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ callback_data
 * @returns –û–±—ä–µ–∫—Ç —Å routeId, cbVersion, args; –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–º token-—Ñ–æ—Ä–º—ã
 */
export function parseCb(data: string): {
  routeId: string;
  cbVersion?: string;
  args: string[];
  isToken: boolean;
  token?: string;
} {
  const [head, ...rest] = data.split(':');
  const [routeId, version] = head.split('!');
  if (!version) {
    return { routeId: head, cbVersion: undefined, args: rest, isToken: false };
  }
  if (rest[0] === 't') {
    return {
      routeId,
      cbVersion: version,
      args: rest.slice(1),
      isToken: true,
      token: rest[1],
    };
  }
  return { routeId, cbVersion: version, args: rest, isToken: false };
}

/**
 * –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å callback_data —Å —Ç–æ–∫–µ–Ω–æ–º (payload —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ TokenStore –∏ –Ω–µ –ª–µ–∑–µ—Ç –≤ –ª–∏–º–∏—Ç 64 –±–∞–π—Ç–∞).
 * @param routeId ID —Ä–æ—É—Ç–∞
 * @param tokenStore –†–µ–∞–ª–∏–∑–∞—Ü–∏—è TokenStore
 * @param payload –õ—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π
 * @param ttlMs TTL –¥–ª—è —Ç–æ–∫–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω)
 * @param cbVersion –í–µ—Ä—Å–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
 */
export async function cbTok(
  routeId: string,
  tokenStore: TokenStore,
  payload: unknown,
  ttlMs = 10 * 60_000,
  cbVersion = 'v1'
): Promise<string> {
  const token = await tokenStore.save(payload, ttlMs);
  return `${routeId}!${cbVersion}:t:${token}`;
}

// ============================================================================
// üß∞ Builders (Public)
// ============================================================================

/** –°–æ–∑–¥–∞—Ç—å —Ä–æ—É—Ç (—É–¥–æ–±–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å —Ç–∏–ø–∞–º–∏). */
export function route<A = unknown, P = unknown>(cfg: Route<A, P>): Route<A, P> {
  return cfg;
}
/** –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É (—É–¥–æ–±–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å —Ç–∏–ø–∞–º–∏). */
export function button<A = unknown>(cfg: Button<A>): Button<A> {
  return cfg;
}

/**
 * –≠–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ (–ø–æ—Å–ª–µ run). –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–µ—à–∞—Ç—å –æ–±—â–∏–π onText –∏ –Ω–∞–≤–∏–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ.
 */
export interface RunningRouter<A = unknown> {
  /** –¢–µ–∫—Å—Ç–æ–≤—ã–π fallback-—Ö–µ–Ω–¥–ª–µ—Ä, –∫–æ–≥–¥–∞ –ù–ï –∂–¥—ë–º –≤–≤–æ–¥–∞ */
  onText(fn: (ctx: Context) => Promise<void> | void): void;
  /** –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ—É—Ç */
  navigate(
    ctx: Context,
    route: Route<A, unknown>,
    params?: unknown
  ): Promise<void>;
  /** –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è ¬´–ù–∞–∑–∞–¥¬ª */
  navigateBack(ctx: Context): Promise<void>;
}

// ============================================================================
// ‚öôÔ∏è Internal implementation
// ============================================================================

const DEFAULTS: Required<
  Omit<StartOptions, 'onError' | 'stateStore' | 'tokenStore'>
> & {
  onError?: StartOptions['onError'];
  stateStore: StateStore;
  tokenStore: TokenStore;
} = {
  inputPrompt: '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚Ä¶',
  backLabel: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
  backCallbackData: '__router_back__',
  renderMode: 'smart',
  onEditFail: 'reply',
  errorRenderMode: 'append',
  errorPrefix: '‚ö†Ô∏è ',
  cancelLabel: '‚úñÔ∏è –û—Ç–º–µ–Ω–∞',
  cancelCallbackData: '__router_cancel__',
  cancelCommands: ['/cancel', '–æ—Ç–º–µ–Ω–∞', '–û—Ç–º–µ–Ω–∞'],
  showCancelOnWait: true,
  cbVersion: 'v1',
  onError: undefined,
  stateStore: new InMemoryStateStore(),
  tokenStore: new InMemoryTokenStore(),
  maxMessages: 10,
};

function isConfigNode<A>(maybeNode: unknown): maybeNode is RouteNode<A> {
  return (
    !!maybeNode &&
    typeof maybeNode === 'object' &&
    'route' in (maybeNode as Record<string, unknown>)
  );
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ–≤—ã–π –º—å—é—Ç–µ–∫—Å –ø–æ –∫–ª—é—á—É (chatId:userId) –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–ø–¥–µ–π—Ç–æ–≤.
 * –ù–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π. –î–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redlock/–∏–Ω–æ–µ.
 */
class SimpleMutex {
  private queue = new Map<string, Promise<void>>();
  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞.
   * @param key –ö–ª—é—á –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
   * @param fn –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
   */
  async runExclusive<T>(key: string, fn: () => Promise<T>): Promise<T> {
    const previous = this.queue.get(key) ?? Promise.resolve();
    let release!: () => void;
    const current = new Promise<void>((resolve) => (release = resolve));
    this.queue.set(key, current);
    await previous;
    try {
      return await fn();
    } finally {
      release();
      if (this.queue.get(key) === current) this.queue.delete(key);
    }
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Ä–æ—É—Ç–µ—Ä –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å Telegraf.
 * @template A –¢–∏–ø actions
 * @param tree –ò–µ—Ä–∞—Ä—Ö–∏—è —Ä–æ—É—Ç–æ–≤ (Route/RouteNode)
 * @param optionsIn –û–ø—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞
 */
export function createRouter<A = unknown>(
  tree: Array<RouteNode<A> | Route<A, unknown>>,
  optionsIn: StartOptions = {}
): {
  /** –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ Telegraf –∏ –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. */
  run: (bot: Telegraf<Context>, actions: A) => RunningRouter<A>;
} {
  const options = {
    ...DEFAULTS,
    ...optionsIn,
    stateStore: optionsIn.stateStore ?? DEFAULTS.stateStore,
    tokenStore: optionsIn.tokenStore ?? DEFAULTS.tokenStore,
  };

  type Entry = {
    route: Route<A, unknown>;
    parentId: string | null;
    hasBackEffective: boolean;
  };
  const entries = new Map<string, Entry>();

  const ensureUnique = (routeId: string): void => {
    if (entries.has(routeId)) throw new Error(`Duplicate route id: ${routeId}`);
  };

  const walk = (
    node: RouteNode<A> | Route<A, unknown>,
    parentId: string | null,
    parentHasBackEffective: boolean
  ): void => {
    const route: Route<A, unknown> = isConfigNode<A>(node)
      ? (node as RouteNode<A>).route
      : (node as Route<A, unknown>);
    const id = route.id;
    ensureUnique(id);

    const hasBackEffective = isConfigNode<A>(node)
      ? !!((node as RouteNode<A>).hasBack ?? false)
      : !!parentHasBackEffective;

    entries.set(id, { route, parentId, hasBackEffective });

    const children = isConfigNode<A>(node)
      ? (node as RouteNode<A>).children
      : undefined;
    if (children?.length) {
      for (const child of children)
        walk(child as RouteNode<A> | Route<A, unknown>, id, hasBackEffective);
    }
  };

  for (const node of tree) walk(node, null, false);

  const mutex = new SimpleMutex();

  // --- state keyed by chat+user in external store
  const getIds = (ctx: Context): { chatId: number; userId: number } => ({
    chatId: ctx.chat?.id ?? 0,
    userId: ctx.from?.id ?? 0,
  });
  const getKey = (ctx: Context): string => {
    const { chatId, userId } = getIds(ctx);
    return `${chatId}:${userId}`;
  };
  const getState = async (ctx: Context): Promise<RouterState> => {
    const { chatId, userId } = getIds(ctx);
    let state = await options.stateStore.get(chatId, userId);
    if (!state) {
      state = { stack: [], params: {}, messages: [] };
      await options.stateStore.set(chatId, userId, state);
    }
    return state;
  };
  const setState = async (ctx: Context, state: RouterState): Promise<void> => {
    const { chatId, userId } = getIds(ctx);
    await options.stateStore.set(chatId, userId, state);
  };

  const getEntry = (routeId?: string): Entry | undefined =>
    routeId ? entries.get(routeId) : undefined;
  const getCurrentRouteId = (state: RouterState): string | undefined =>
    state.stack[state.stack.length - 1];

  const ensureRows = (
    buttons?: Array<Button<A> | Button<A>[]>
  ): Button<unknown>[][] => {
    if (!buttons?.length) return [];
    const rows: Button<unknown>[][] = [];
    for (const button of buttons)
      rows.push(
        (Array.isArray(button) ? button : [button]) as Button<unknown>[]
      );
    return rows;
  };

  const buttonsEqual = (
    left: Button<unknown>[][],
    right: Button<unknown>[][]
  ): boolean => {
    if (left.length !== right.length) return false;
    for (let rowIndex = 0; rowIndex < left.length; rowIndex++) {
      if (left[rowIndex].length !== right[rowIndex].length) return false;
      for (let colIndex = 0; colIndex < left[rowIndex].length; colIndex++) {
        if (
          left[rowIndex][colIndex].text !== right[rowIndex][colIndex].text ||
          left[rowIndex][colIndex].callback !==
            right[rowIndex][colIndex].callback
        )
          return false;
      }
    }
    return true;
  };

  /**
   * –°–æ–±—Ä–∞—Ç—å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á—ë—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω—ã—Ö/–≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤ ¬´–ù–∞–∑–∞–¥¬ª/¬´–û—Ç–º–µ–Ω–∞¬ª.
   */
  const buildKeyboardMarkup = (
    rows: Button<unknown>[][],
    showBack: boolean,
    showCancel: boolean
  ): InlineKeyboardMarkup => {
    const keyboardRows = rows.map((row) =>
      row.map((button) => Markup.button.callback(button.text, button.callback))
    );
    if (showBack || showCancel) {
      const extraRow: ReturnType<typeof Markup.button.callback>[] = [];
      if (showCancel)
        extraRow.push(
          Markup.button.callback(
            options.cancelLabel,
            options.cancelCallbackData
          )
        );
      if (showBack)
        extraRow.push(
          Markup.button.callback(options.backLabel, options.backCallbackData)
        );
      keyboardRows.push(extraRow);
    }
    return Markup.inlineKeyboard(keyboardRows).reply_markup;
  };

  /**
   * –û–±—Ä–µ–∑–∫–∞ –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: —É–¥–∞–ª—è–µ–º –∏–∑ —á–∞—Ç–∞ (–µ—Å–ª–∏ –º–æ–∂–Ω–æ) –∏ –∏–∑ state.
   */
  async function pruneOverflow(ctx: Context, st: RouterState): Promise<void> {
    const limit = options.maxMessages;
    const overflow = Math.max(0, st.messages.length - limit);
    if (overflow <= 0) return;
    const toDrop = st.messages.slice(0, overflow); // —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ
    for (const m of toDrop) {
      try {
        await ctx.deleteMessage(m.messageId);
      } catch {
        /* ignore */
      }
    }
    st.messages = st.messages.slice(overflow);
    await setState(ctx, st);
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å View —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –∏ —É—á—ë—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è.
   */
  async function renderView(
    ctx: Context,
    view: RouteView<A> | undefined,
    inheritedShowBack: boolean,
    inheritedShowCancel: boolean
  ): Promise<void> {
    const state = await getState(ctx);
    const rows = ensureRows(view?.buttons);

    // –ª–æ–∫–∞–ª—å–Ω—ã–µ override
    const finalBack =
      typeof view?.showBack === 'boolean' ? view.showBack : inheritedShowBack;
    const finalCancel =
      typeof view?.showCancel === 'boolean'
        ? view.showCancel
        : inheritedShowCancel;

    const keyboardMarkup = buildKeyboardMarkup(rows, finalBack, finalCancel);
    const mode: RenderMode = (view?.renderMode ??
      options.renderMode) as RenderMode;

    // helper to record message mapping
    const remember = async (messageId: number): Promise<void> => {
      const entry = {
        messageId,
        text: view?.text ?? '',
        buttons: rows as Button<unknown>[][],
        showBack: finalBack,
        showCancel: finalCancel,
      };
      const idx = state.messages.findIndex((m) => m.messageId === messageId);
      if (idx >= 0) state.messages[idx] = entry;
      else state.messages.push(entry);
      await setState(ctx, state);
      await pruneOverflow(ctx, state);
    };
    if (mode === 'append') {
      const sentMessage = await ctx.reply(view?.text ?? '', {
        reply_markup: keyboardMarkup,
        link_preview_options: { is_disabled: view?.disablePreview ?? true },
      });
      const sentId = (sentMessage as Message).message_id;
      if (sentId) await remember(sentId);
      return;
    }

    if (mode === 'replace') {
      const mid = (
        ctx as Context & {
          callbackQuery?: { message?: { message_id?: number } };
        }
      ).callbackQuery?.message?.message_id;
      const targetId =
        mid ?? state.messages[state.messages.length - 1]?.messageId;
      if (targetId) {
        try {
          await ctx.deleteMessage(targetId);
          state.messages = state.messages.filter(
            (m) => m.messageId !== targetId
          );
          await setState(ctx, state);
        } catch {
          /* ignore */
        }
      }
      const sentMessage = await ctx.reply(view?.text ?? '', {
        reply_markup: keyboardMarkup,
        link_preview_options: { is_disabled: view?.disablePreview ?? true },
      });
      const sentId = (sentMessage as Message).message_id;
      if (sentId) await remember(sentId);
      return;
    }

    // default 'smart' / 'edit'
    const mid = (
      ctx as Context & { callbackQuery?: { message?: { message_id?: number } } }
    ).callbackQuery?.message?.message_id;

    if (mode === 'smart' && mid) {
      const prev = state.messages.find((m) => m.messageId === mid);
      if (
        prev &&
        prev.text === (view?.text ?? '') &&
        buttonsEqual(prev.buttons, rows) &&
        prev.showBack === finalBack &&
        prev.showCancel === finalCancel
      ) {
        return; // no-op
      }
      try {
        await ctx.editMessageText(view?.text ?? '', {
          reply_markup: keyboardMarkup,
          link_preview_options: { is_disabled: view?.disablePreview ?? true },
        });
        await remember(mid);
        return;
      } catch {
        // fall through ‚Üí onEditFail
      }
      if (options.onEditFail === 'replace') {
        try {
          await ctx.deleteMessage(mid);
          state.messages = state.messages.filter((m) => m.messageId !== mid);
          await setState(ctx, state);
        } catch {
          /* ignore */
        }
      } else if (options.onEditFail === 'ignore') {
        return;
      }
      const sentMessage = await ctx.reply(view?.text ?? '', {
        reply_markup: keyboardMarkup,
        link_preview_options: { is_disabled: view?.disablePreview ?? true },
      });
      const sentId = (sentMessage as Message).message_id;
      if (sentId) await remember(sentId);
      return;
    }

    if (mode === 'edit') {
      if (mid) {
        try {
          await ctx.editMessageText(view?.text ?? '', {
            reply_markup: keyboardMarkup,
            link_preview_options: { is_disabled: view?.disablePreview ?? true },
          });
          await remember(mid);
          return;
        } catch {
          if (options.onEditFail === 'replace') {
            try {
              await ctx.deleteMessage(mid);
              state.messages = state.messages.filter(
                (m) => m.messageId !== mid
              );
              await setState(ctx, state);
            } catch {
              /* ignore */
            }
          } else if (options.onEditFail === 'ignore') {
            return;
          }
          const sentMessage = await ctx.reply(view?.text ?? '', {
            reply_markup: keyboardMarkup,
            link_preview_options: { is_disabled: view?.disablePreview ?? true },
          });
          const sentId = (sentMessage as Message).message_id;
          if (sentId) await remember(sentId);
          return;
        }
      }
      const sentMessage = await ctx.reply(view?.text ?? '', {
        reply_markup: keyboardMarkup,
        link_preview_options: { is_disabled: view?.disablePreview ?? true },
      });
      const sentId = (sentMessage as Message).message_id;
      if (sentId) await remember(sentId);
      return;
    }

    // fallback
    const sentMessage = await ctx.reply(view?.text ?? '', {
      reply_markup: keyboardMarkup,
      link_preview_options: { is_disabled: view?.disablePreview ?? true },
    });
    const sentId = (sentMessage as Message).message_id;
    if (sentId) await remember(sentId);
  }

  /** –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–æ—É—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å—Ç–µ–∫ –∏ –≤—ã–∑–≤–∞–≤ –µ–≥–æ action. */
  async function _navigate<NP = unknown>(
    ctx: Context,
    route: Route<A, NP>,
    params?: NP
  ): Promise<void> {
    const state = await getState(ctx);
    state.stack.push(route.id);
    state.params[route.id] = params as unknown;

    const e = getEntry(route.id);
    if (!e) throw new Error(`Route not found: ${route.id}`);
    const inheritedShowBack = e.hasBackEffective && !!e.parentId;

    if (route.waitForText) {
      state.awaitingTextRouteId = route.id;
      const inheritedShowCancel = options.showCancelOnWait === true;
      await renderView(
        ctx,
        { text: options.inputPrompt, buttons: [] },
        inheritedShowBack,
        inheritedShowCancel
      );
      await setState(ctx, state);
      return;
    }

    state.awaitingTextRouteId = undefined;
    await setState(ctx, state);
    try {
      function navigateImpl<NP = unknown>(
        r: Route<A, NP>,
        p?: NP
      ): Promise<void> {
        return _navigate(ctx, r, p);
      }
      const view = await route.action({
        ctx,
        actions: currentActions as A,
        params: params as NP,
        navigate: navigateImpl,
        navigateBack: () => _navigateBack(ctx),
        state,
      });
      if (view)
        await renderView(ctx, view as RouteView<A>, inheritedShowBack, false);
    } catch (err) {
      await handleError(ctx, err, inheritedShowBack, false);
    }
  }

  /** –ü–µ—Ä–µ–π—Ç–∏ ¬´–ù–∞–∑–∞–¥¬ª –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–æ—É—Ç –∏–∑ —Å—Ç–µ–∫–∞. */
  async function _navigateBack(ctx: Context): Promise<void> {
    const state = await getState(ctx);
    state.stack.pop();
    state.awaitingTextRouteId = undefined;
    await setState(ctx, state);

    const currentId = getCurrentRouteId(state);
    if (!currentId) {
      try {
        await ctx.editMessageReplyMarkup(undefined);
      } catch {
        /* ignore */
      }
      return;
    }

    const e = getEntry(currentId);
    if (!e) return;
    const route = e.route;
    const params = state.params[currentId];
    const inheritedShowBack = e.hasBackEffective && !!e.parentId;

    if (route.waitForText) {
      const inheritedShowCancel = options.showCancelOnWait === true;
      await renderView(
        ctx,
        { text: options.inputPrompt },
        inheritedShowBack,
        inheritedShowCancel
      );
      state.awaitingTextRouteId = currentId;
      await setState(ctx, state);
      return;
    }

    try {
      function navigateImpl<NP = unknown>(
        r: Route<A, NP>,
        p?: NP
      ): Promise<void> {
        return _navigate(ctx, r, p);
      }
      const view = await route.action({
        ctx,
        actions: currentActions as A,
        params,
        navigate: navigateImpl,
        navigateBack: () => _navigateBack(ctx),
        state,
      });
      if (view)
        await renderView(ctx, view as RouteView<A>, inheritedShowBack, false);
    } catch (err) {
      await handleError(ctx, err, inheritedShowBack, false);
    }
  }

  /** –û—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥. */
  async function _cancelWait(ctx: Context): Promise<void> {
    const state = await getState(ctx);
    if (state.awaitingTextRouteId) {
      const rid = state.awaitingTextRouteId;
      if (rid === getCurrentRouteId(state)) state.stack.pop();
      state.awaitingTextRouteId = undefined;
      await setState(ctx, state);
    }
    await _navigateBack(ctx);
  }

  /** –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∫–∞–∑ –æ—à–∏–±–æ–∫ (RouterUserError ‚Äî –∫—Ä–∞—Å–∏–≤–æ, –ø—Ä–æ—á–∏–µ ‚Äî –æ–±—â–∏–º —Ç–µ–∫—Å—Ç–æ–º). */
  async function handleError(
    ctx: Context,
    err: unknown,
    inheritedShowBack: boolean,
    inheritedShowCancel: boolean
  ): Promise<void> {
    const st = await getState(ctx);
    options.onError?.(err, ctx, st);
    if (err instanceof RouterUserError) {
      const v: RouteView<unknown> = {
        text: (err.view?.text ??
          `${options.errorPrefix}${err.message}`) as string,
        buttons:
          (err.view?.buttons as
            | Button<unknown>[]
            | Button<unknown>[][]
            | undefined) ?? [],
        disablePreview:
          (err.view?.disablePreview as boolean | undefined) ?? true,
        renderMode:
          (err.view?.renderMode as RenderMode | undefined) ??
          options.errorRenderMode,
      };
      await renderView(
        ctx,
        v as RouteView<A>,
        inheritedShowBack,
        inheritedShowCancel
      );
      return;
    }
    const v: RouteView<unknown> = {
      text: `${options.errorPrefix}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞`,
      buttons: [],
      renderMode: options.errorRenderMode,
    };
    await renderView(
      ctx,
      v as RouteView<A>,
      inheritedShowBack,
      inheritedShowCancel
    );
  }

  let currentActions: A | null = null;

  // ------------------------------------------------------------------------
  // Telegraf bindings
  // ------------------------------------------------------------------------

  return {
    run(bot: Telegraf<Context>, actions: A): RunningRouter<A> {
      currentActions = actions;

      // callback_query
      bot.on('callback_query', async (ctx) => {
        const key = getKey(ctx);
        await mutex.runExclusive(key, async () => {
          const state = await getState(ctx);
          const data = (ctx as Context & { callbackQuery?: { data?: string } })
            .callbackQuery?.data as string | undefined;
          if (!data) return;

          const parsed = parseCb(data);
          // —ç–º—É–ª–∏—Ä—É–µ–º ctx.match = [full, ...args]
          (ctx as Context & { match?: string[] }).match = [
            data,
            ...parsed.args,
          ];

          try {
            await ctx.answerCbQuery();
          } catch {
            /* ignore */
          }

          if (data === options.cancelCallbackData) {
            await _cancelWait(ctx);
            return;
          }
          if (data === options.backCallbackData) {
            await _navigateBack(ctx);
            return;
          }

          // –ù–∞–π–¥—ë–º –∫–Ω–æ–ø–∫—É –ø–æ message_id, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
          const mid = (
            ctx as Context & {
              callbackQuery?: { message?: { message_id?: number } };
            }
          ).callbackQuery?.message?.message_id;
          let matched: Button<A> | undefined;
          if (mid) {
            const messageEntry = state.messages.find(
              (m) => m.messageId === mid
            );
            if (messageEntry) {
              outer1: for (const row of messageEntry.buttons as Button<A>[][]) {
                for (const button of row) {
                  if (button.callback === data) {
                    matched = button;
                    break outer1;
                  }
                }
              }
            }
          }
          if (!matched) {
            const last = state.messages[state.messages.length - 1];
            if (last) {
              outer2: for (const row of last.buttons as Button<A>[][]) {
                for (const button of row) {
                  if (button.callback === data) {
                    matched = button;
                    break outer2;
                  }
                }
              }
            }
          }

          if (matched?.action) {
            try {
              function navigateImpl<NP = unknown>(
                r: Route<A, NP>,
                p?: NP
              ): Promise<void> {
                return _navigate(ctx, r, p);
              }
              await matched.action({
                ctx,
                actions: currentActions as A,
                navigate: navigateImpl,
                navigateBack: () => _navigateBack(ctx),
              });
            } catch (err) {
              const curId = getCurrentRouteId(state);
              if (!curId) return;
              const e = getEntry(curId);
              const inheritedShowBack = !!e?.hasBackEffective && !!e?.parentId;
              await handleError(ctx, err, inheritedShowBack, false);
            }
            return;
          }

          // –§–æ–ª–ª–±—ç–∫: —Ç—Ä–∞–∫—Ç—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫–∞–∫ id —Ä–æ—É—Ç–∞
          const rid = parsed.routeId;
          const e = getEntry(rid);
          if (e) {
            const params = state.params[rid];
            await _navigate(ctx, e.route, params);
            return;
          }
        });
      });

      // text while waiting
      bot.on('text', async (ctx, next) => {
        const key = getKey(ctx);
        await mutex.runExclusive(key, async () => {
          const state = await getState(ctx);
          const rid = state.awaitingTextRouteId;
          if (!rid) {
            await next();
            return;
          }

          const txt = (
            ctx as Context & { message?: { text?: string } }
          ).message?.text?.trim();
          if (
            txt &&
            options.cancelCommands.some(
              (c) => c.toLowerCase() === txt.toLowerCase()
            )
          ) {
            await _cancelWait(ctx);
            return;
          }

          const e = getEntry(rid);
          if (!e) {
            await next();
            return;
          }
          const route = e.route;
          const params = state.params[rid];
          try {
            function navigateImpl<NP = unknown>(
              r: Route<A, NP>,
              p?: NP
            ): Promise<void> {
              return _navigate(ctx, r, p);
            }
            const result = await route.action({
              ctx,
              actions: currentActions as A,
              params,
              navigate: navigateImpl,
              navigateBack: () => _navigateBack(ctx),
              state: state,
            });
            if (result) {
              const inheritedShowBack = e.hasBackEffective && !!e.parentId;
              await renderView(
                ctx,
                result as RouteView<A>,
                inheritedShowBack,
                false
              );
              state.awaitingTextRouteId = undefined;
              await setState(ctx, state);
            } else {
              await _navigateBack(ctx);
            }
          } catch (err) {
            const inheritedShowBack = e.hasBackEffective && !!e.parentId;
            await handleError(ctx, err, inheritedShowBack, true);
          }
        });
      });

      // fallback text when NOT waiting
      let onTextFallback: ((ctx: Context) => Promise<void> | void) | null =
        null;
      bot.on('text', async (ctx) => {
        const st = await getState(ctx);
        if (st.awaitingTextRouteId) return;
        if (onTextFallback) await onTextFallback(ctx);
      });

      return {
        onText(fn: (ctx: Context) => Promise<void> | void): void {
          onTextFallback = fn;
        },
        navigate(
          ctx: Context,
          route: Route<A, unknown>,
          params?: unknown
        ): Promise<void> {
          return mutex.runExclusive(getKey(ctx), () =>
            _navigate(ctx, route, params)
          );
        },
        navigateBack(ctx: Context): Promise<void> {
          return mutex.runExclusive(getKey(ctx), () => _navigateBack(ctx));
        },
      };
    },
  };
}

// ============================================================================
// üìù Notes
// - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram –Ω–∞ deleteMessage: –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π/–±–µ–∑ –ø—Ä–∞–≤ —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å.
// - –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π StateStore + —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ª–æ–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
// ============================================================================
